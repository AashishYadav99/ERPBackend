'use strict';
const {
  Model, DataTypes
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class customer_info extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      // this.belongsTo(models.user_master, {foreignKey:'id'})
      this.belongsTo(models.user_master, {
        foreignKey: 'user_id', // Assuming 'user_id' is the foreign key in the customer_info table
        as: 'users' // Alias, optional but useful for clarity in queries
    });

    }
  }
  customer_info.init({
    uuid: DataTypes.CHAR(36),
    organisation_id: DataTypes.BIGINT.UNSIGNED,
    user_id: DataTypes.BIGINT.UNSIGNED,
    region_id: DataTypes.BIGINT.UNSIGNED,
    route_id: DataTypes.BIGINT.UNSIGNED,
    is_parent: DataTypes.BIGINT,
    payment_term_id: DataTypes.BIGINT.UNSIGNED,
    customer_group_id: DataTypes.BIGINT.UNSIGNED,
    sales_organisation_id: DataTypes.BIGINT.UNSIGNED,
    channel_id: DataTypes.BIGINT.UNSIGNED,
    sub_secondary_channel_id: DataTypes.BIGINT,
    customer_category_id: DataTypes.BIGINT.UNSIGNED,
    merchandiser_id: DataTypes.BIGINT.UNSIGNED,
    customer_code: DataTypes.STRING(25),
    erp_code: DataTypes.STRING(50),
    customer_type_id: DataTypes.INTEGER(11),
    land_mark_id: DataTypes.BIGINT,
    no_of_invoice: DataTypes.BIGINT.UNSIGNED,
    radius: DataTypes.STRING(191),
    customer_address_1: DataTypes.STRING(191),
    customer_address_2: DataTypes.STRING(191),
    trn_no: DataTypes.STRING(191),
    trn_name: DataTypes.STRING(191),
    customer_city: DataTypes.STRING(191),
    customer_state: DataTypes.STRING(191),
    customer_zipcode: DataTypes.STRING(191),
    customer_phone: DataTypes.STRING(191),
    customer_phone_1: DataTypes.STRING(191),
    customer_phone_2: DataTypes.STRING(191),
    customer_phone_3: DataTypes.STRING(191),
    customer_phone_4: DataTypes.STRING(191),
    customer_phone_5: DataTypes.STRING(191),
    customer_address_1_lat: DataTypes.STRING(191),
    customer_address_1_lang: DataTypes.STRING(191),
    customer_address_2_lat: DataTypes.STRING(191),
    customer_address_2_lang: DataTypes.STRING(191),
    balance: DataTypes.DECIMAL(15, 2),
    credit_limit: DataTypes.DECIMAL(15, 2),
    credit_days: DataTypes.INTEGER(11),
    ship_to_party: DataTypes.BIGINT.UNSIGNED,
    sold_to_party: DataTypes.BIGINT.UNSIGNED,
    payer: DataTypes.BIGINT.UNSIGNED,
    bill_to_payer: DataTypes.BIGINT.UNSIGNED,
    profile_image: DataTypes.STRING(191),
    expired_date: DataTypes.DATE,
    lop: DataTypes.STRING(191),
    due_on: DataTypes.ENUM('1', '2'),
    source: DataTypes.INTEGER(11),
    current_stage: DataTypes.ENUM('Pending', 'Approved', 'Rejected'),
    current_stage_comment: DataTypes.TEXT,
    status: DataTypes.INTEGER(11),
    is_lob: DataTypes.TINYINT(1),
    amount: DataTypes.BIGINT.UNSIGNED,
    rebate: DataTypes.BIGINT.UNSIGNED,
    sales_enable: DataTypes.ENUM('0', '1'),
    return_enable: DataTypes.ENUM('0', '1'),
    collection_enable: DataTypes.ENUM('0', '1'),
    print_enable: DataTypes.ENUM('0', '1'),
    geo_checking: DataTypes.ENUM('0', '1'),
    credit_limit_check: DataTypes.STRING(255),
    block_customer: DataTypes.ENUM('Order', 'Return', 'Sales', 'Overall'),
    promotion_enable: DataTypes.ENUM('0', '1'),
    stock_capture: DataTypes.ENUM('0', '1'),
    discount: DataTypes.ENUM('0', '1'),
    barcode_print: DataTypes.ENUM('0', '1'),
    service_start_time: DataTypes.STRING(191),
    service_end_time: DataTypes.STRING(191),
    total_window_time: DataTypes.STRING(191),
    contact_person: DataTypes.STRING(191),
    street: DataTypes.STRING(191),
    location: DataTypes.STRING(191),
    fax_no: DataTypes.STRING(191),
    sponsor_name: DataTypes.STRING(191),
    sponsor_nationality: DataTypes.STRING(191),
    sponsor_contact_no: DataTypes.STRING(191),
    proprietor_name: DataTypes.STRING(191),
    proprietor_nationality: DataTypes.STRING(191),
    proprietor_contact_no: DataTypes.STRING(191),
    owner_visa_passport: DataTypes.STRING(191),
    sponsor_visa_passport: DataTypes.STRING(191),
    sponsor_region_id: DataTypes.STRING(191),
    fta_registration_copy: DataTypes.STRING(191),
    nature_of_business: DataTypes.STRING(191),
    year_of_establishment: DataTypes.STRING(191),
    trade_license: DataTypes.STRING(191),
    trade_license_copy: DataTypes.STRING(191),
    trade_expiry_date: DataTypes.STRING(191),
    chamber_of_commerce: DataTypes.STRING(191),
    expiry_date: DataTypes.STRING(191),
    bank_informantion: DataTypes.STRING(191),
    branch_associates_name: DataTypes.STRING(191),
    branch_associates_address: DataTypes.STRING(191),
    delivery_time_window: DataTypes.STRING(191),
    estimate_monthly_purchase: DataTypes.STRING(191),
    estimate_qty_amt: DataTypes.STRING(191),
    bank_guarrtee_value: DataTypes.STRING(191),
    estimate_expiry_date: DataTypes.STRING(191),
    name_of_good_recevier: DataTypes.STRING(191),
    owner_passport_copy_expiry_date: DataTypes.STRING(191),
    sponser_passport_copy_expiry_date: DataTypes.STRING(191),
    trade_lince_expiry_date: DataTypes.STRING(191),
    account_number_bank: DataTypes.STRING(191),
    other_image: DataTypes.TEXT,
    sales_geo_checkin: DataTypes.ENUM('0', '1'),
    return_geo_checkin: DataTypes.ENUM('0', '1'),
    collection_geo_checkin: DataTypes.ENUM('0', '1'),
    capture_location_enable: DataTypes.ENUM('0', '1'),
    creation_source: DataTypes.STRING(255),
    created_by: DataTypes.STRING(255),
    created_date_additional_information: DataTypes.DATE,
    status_additional_information: DataTypes.STRING(255),
    discounted: DataTypes.STRING(255),
    identification_number: DataTypes.STRING(255),
    nationality: DataTypes.STRING(255),
    date_of_birth: DataTypes.DATE,
    gender: DataTypes.INTEGER(11),
    card_type_id: DataTypes.BIGINT,
    card_number: DataTypes.STRING(255),
    card_expiry: DataTypes.DATE,
    card_doc: DataTypes.STRING(255),
    fssai_no: DataTypes.STRING(255),
    state_code: DataTypes.STRING(255),
    msme_no: DataTypes.STRING(255),
    is_supplier: DataTypes.TINYINT(1),
  }, {
    sequelize,
    modelName: 'customer_info',
    tableName: 'customer_infos',
    timestamps: true,
    paranoid: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at',
    deletedAt: 'deleted_at',
  });
  return customer_info;
}
